{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "default",
  "type": "registry:component",
  "title": "Confirm Dialog",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "lucide-react",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "@radix-ui/react-alert-dialog",
    "@radix-ui/react-dialog"
  ],
  "devDependencies": [
    "@tailwindcss/postcss",
    "tailwindcss",
    "tw-animate-css"
  ],
  "files": [
    {
      "path": "registry/neutral/default/components/common/confirm-dialog.tsx",
      "content": "\"use client\";\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { _registerDialog } from \"@/utils/dialog\";\nimport { AlertDialogOptions, AlertVariant } from \"@/interfaces/common/dialog\";\nimport {\n  AlertTriangleIcon,\n  CheckCircle2Icon,\n  InfoIcon,\n  LucideIcon,\n  XCircleIcon,\n} from \"lucide-react\";\nimport { defaultConfirmDialogText } from \"@/consts/common/dialog\";\nimport { ButtonVariant } from \"@/components/ui/button\";\n\ninterface VariantStyleProps {\n  icon?: LucideIcon;\n  confirmBtnVariant?: ButtonVariant;\n}\n\nconst variantStyles: Record<AlertVariant, VariantStyleProps> = {\n  default: {},\n  success: {\n    icon: CheckCircle2Icon,\n  },\n  info: {\n    icon: InfoIcon,\n  },\n  warning: {\n    icon: AlertTriangleIcon,\n  },\n  danger: {\n    icon: AlertTriangleIcon,\n    confirmBtnVariant: \"destructive\" as const,\n  },\n  error: {\n    icon: XCircleIcon,\n  },\n};\n\nexport function ConfirmDialog() {\n  const [options, setOptions] = useState<AlertDialogOptions | null>(null); // null for closed state\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  const open = !!options;\n\n  const style = variantStyles[options?.variant || \"default\"];\n\n  // Default Text\n  const title = options?.title || defaultConfirmDialogText.title;\n  const description =\n    options?.description || defaultConfirmDialogText.description;\n  const confirmText =\n    options?.confirmText || defaultConfirmDialogText.confirmText;\n  const cancelText = options?.cancelText || defaultConfirmDialogText.cancelText;\n\n  useEffect(() => {\n    // NOTE: For presistent modal container. If not assign ref, when loading state change\n    // and component re-render, dialog will become null from rendering condition below\n    if (!rootRef.current) {\n      const el = document.createElement(\"div\");\n      document.body.appendChild(el);\n      rootRef.current = el;\n    }\n\n    _registerDialog(setOptions);\n  }, []);\n\n  const handleConfirm = async () => {\n    if (!options?.onConfirm) {\n      setOptions(null);\n      return;\n    }\n\n    const result = options.onConfirm();\n    try {\n      if (result instanceof Promise) {\n        setLoading(true);\n        await result;\n      } else {\n        options.onConfirm();\n      }\n\n      setOptions(null);\n    } catch {\n      if (options.closeOnError) {\n        setOptions(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    options?.onCancel?.();\n    setOptions(null);\n  };\n\n  if (!rootRef.current) return null;\n\n  return createPortal(\n    <AlertDialog open={open} onOpenChange={(open) => !open && handleClose()}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {style.icon && <style.icon />}\n            <AlertDialogTitle>{title}</AlertDialogTitle>\n          </div>\n        </AlertDialogHeader>\n        <AlertDialogDescription>{description}</AlertDialogDescription>\n        <AlertDialogFooter>\n          <AlertDialogCancel\n            disabled={!open}\n            loading={loading}\n            onClick={() => handleClose()}\n          >\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            disabled={!open}\n            loading={loading}\n            variant={style.confirmBtnVariant}\n            onClick={() => handleConfirm()}\n          >\n            {confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>,\n    rootRef.current\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/neutral/default/components/ui/alert-dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button, buttonVariants } from \"@/components/ui/button\";\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />;\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  );\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  );\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  );\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogAction({\n  className,\n  loading,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  return (\n    <Button\n      loading={loading}\n      className={cn(buttonVariants({ loading }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogCancel({\n  className,\n  loading,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  return (\n    <Button\n      variant=\"outline\"\n      loading={loading}\n      className={cn(buttonVariants({ variant: \"outline\", loading }), className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/neutral/default/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot, Slottable } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Loader2Icon } from \"lucide-react\";\n\nexport type ButtonVariant = VariantProps<typeof buttonVariants>[\"variant\"];\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white dark:text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        \"destructive-outline\":\n          \"border border-destructive bg-background text-destructive shadow-xs hover:bg-destructive/5 dark:bg-input/30\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n      loading: {\n        true: \"text-transparent\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nconst spinnerVariants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"text-primary-foreground\",\n      destructive: \"text-white\",\n      outline: \"text-primary\",\n      \"destructive-outline\": \"text-destructive\",\n      secondary: \"text-secondary-foreground\",\n      ghost: \"text-primary\",\n      link: \"text-primary\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  loading = false,\n  disabled = false,\n  children,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n    loading?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className, loading }))}\n      disabled={loading || disabled}\n      {...props}\n    >\n      {loading && (\n        <Loader2Icon\n          className={cn(\n            spinnerVariants({ variant }),\n            \"absolute animate-spin\",\n            \"loading\"\n          )}\n        />\n      )}\n      <Slottable>{children}</Slottable>\n    </Comp>\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "registry/neutral/default/consts/common/dialog.ts",
      "content": "import { AlertDialogOptions } from \"@/interfaces/common/dialog\";\n\nexport const defaultConfirmDialogText: Partial<AlertDialogOptions> = {\n  title: \"Confirmation\",\n  description: \"Confirm your action ?\",\n  cancelText: \"Cancel\",\n  confirmText: \"Confirm\",\n};\n",
      "type": "registry:file",
      "target": "consts/common/dialog.ts"
    },
    {
      "path": "registry/neutral/default/interfaces/common/dialog.ts",
      "content": "export type AlertVariant =\n  | \"default\"\n  | \"success\"\n  | \"info\"\n  | \"warning\"\n  | \"danger\"\n  | \"error\";\n\nexport type AlertDialogOptions = {\n  title?: string;\n  description?: string;\n  cancelText?: string;\n  confirmText?: string;\n  variant?: AlertVariant;\n\n  /**\n   * Wether to close dialog on confirmFn (type Promise) error or not.\n   * @default false\n   */\n  closeOnError?: boolean;\n\n  onConfirm?: () => void | Promise<unknown>;\n  onCancel?: () => void;\n};\n",
      "type": "registry:file",
      "target": "interfaces/common/dialog.ts"
    },
    {
      "path": "registry/neutral/default/utils/dialog.ts",
      "content": "import { defaultConfirmDialogText } from \"@/consts/common/dialog\";\nimport { AlertDialogOptions } from \"@/interfaces/common/dialog\";\n\nlet setPendingDialog: React.Dispatch<\n  React.SetStateAction<AlertDialogOptions | null>\n>;\n\nfunction confirm(options?: AlertDialogOptions): Promise<boolean> {\n  return new Promise(() => {\n    if (!setPendingDialog) {\n      throw new Error(\"ConfirmDialog is not mounted.\");\n    }\n    setPendingDialog(() => ({\n      ...defaultConfirmDialogText,\n      ...(options || {}),\n    }));\n  });\n}\n\nfunction withVariant(variant: AlertDialogOptions[\"variant\"]) {\n  return (options: AlertDialogOptions) => confirm({ ...options, variant });\n}\n\nexport function _registerDialog(cb: typeof setPendingDialog) {\n  setPendingDialog = cb;\n}\n\nexport const dialog = {\n  confirm,\n  success: withVariant(\"success\"),\n  info: withVariant(\"info\"),\n  warning: withVariant(\"warning\"),\n  danger: withVariant(\"danger\"),\n  error: withVariant(\"error\"),\n};\n",
      "type": "registry:file",
      "target": "utils/dialog.ts"
    }
  ]
}